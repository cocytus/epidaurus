//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Epidaurus.Domain.Entities", "MovieSeenStatus", "Movie", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Epidaurus.Domain.Entities.Movie), "SeenStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.SeenStatus))]
[assembly: EdmRelationshipAttribute("Epidaurus.Domain.Entities", "StorageLocationMovieSource", "StorageLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Epidaurus.Domain.Entities.StorageLocation), "MovieSource", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.MovieAtStorage))]
[assembly: EdmRelationshipAttribute("Epidaurus.Domain.Entities", "UserSeenStatus", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Epidaurus.Domain.Entities.User), "SeenStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.SeenStatus))]
[assembly: EdmRelationshipAttribute("Epidaurus.Domain.Entities", "MovieMovieAtStorage", "Movie", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Epidaurus.Domain.Entities.Movie), "MovieAtStorage", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.MovieAtStorage))]
[assembly: EdmRelationshipAttribute("Epidaurus.Domain.Entities", "GenreMovie", "Genre", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.Genre), "Movie", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.Movie))]
[assembly: EdmRelationshipAttribute("Epidaurus.Domain.Entities", "MovieWriter", "Movie", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.Movie), "Person", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.Person))]
[assembly: EdmRelationshipAttribute("Epidaurus.Domain.Entities", "MovieActor", "Movie", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.Movie), "Person", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.Person))]
[assembly: EdmRelationshipAttribute("Epidaurus.Domain.Entities", "MovieDirector", "Movie", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.Movie), "Person", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.Person))]
[assembly: EdmRelationshipAttribute("Epidaurus.Domain.Entities", "UserRememberedSessions", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Epidaurus.Domain.Entities.User), "RememberedSessions", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.RememberedSessions), true)]
[assembly: EdmRelationshipAttribute("Epidaurus.Domain.Entities", "UserToWatch", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Epidaurus.Domain.Entities.User), "ToWatch", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.ToWatch), true)]
[assembly: EdmRelationshipAttribute("Epidaurus.Domain.Entities", "ToWatchMovie", "ToWatch", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Epidaurus.Domain.Entities.ToWatch), "Movie", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Epidaurus.Domain.Entities.Movie), true)]

#endregion

namespace Epidaurus.Domain.Entities
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class EpidaurusDbContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new EpidaurusDbContainer object using the connection string found in the 'EpidaurusDbContainer' section of the application configuration file.
        /// </summary>
        public EpidaurusDbContainer() : base("name=EpidaurusDbContainer", "EpidaurusDbContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new EpidaurusDbContainer object.
        /// </summary>
        public EpidaurusDbContainer(string connectionString) : base(connectionString, "EpidaurusDbContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new EpidaurusDbContainer object.
        /// </summary>
        public EpidaurusDbContainer(EntityConnection connection) : base(connection, "EpidaurusDbContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Movie> Movies
        {
            get
            {
                if ((_Movies == null))
                {
                    _Movies = base.CreateObjectSet<Movie>("Movies");
                }
                return _Movies;
            }
        }
        private ObjectSet<Movie> _Movies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MovieAtStorage> MovieAtStorages
        {
            get
            {
                if ((_MovieAtStorages == null))
                {
                    _MovieAtStorages = base.CreateObjectSet<MovieAtStorage>("MovieAtStorages");
                }
                return _MovieAtStorages;
            }
        }
        private ObjectSet<MovieAtStorage> _MovieAtStorages;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StorageLocation> StorageLocations
        {
            get
            {
                if ((_StorageLocations == null))
                {
                    _StorageLocations = base.CreateObjectSet<StorageLocation>("StorageLocations");
                }
                return _StorageLocations;
            }
        }
        private ObjectSet<StorageLocation> _StorageLocations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SeenStatus> SeenStatuses
        {
            get
            {
                if ((_SeenStatuses == null))
                {
                    _SeenStatuses = base.CreateObjectSet<SeenStatus>("SeenStatuses");
                }
                return _SeenStatuses;
            }
        }
        private ObjectSet<SeenStatus> _SeenStatuses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Genre> Genres
        {
            get
            {
                if ((_Genres == null))
                {
                    _Genres = base.CreateObjectSet<Genre>("Genres");
                }
                return _Genres;
            }
        }
        private ObjectSet<Genre> _Genres;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Person> People
        {
            get
            {
                if ((_People == null))
                {
                    _People = base.CreateObjectSet<Person>("People");
                }
                return _People;
            }
        }
        private ObjectSet<Person> _People;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RememberedSessions> RememberedSessions
        {
            get
            {
                if ((_RememberedSessions == null))
                {
                    _RememberedSessions = base.CreateObjectSet<RememberedSessions>("RememberedSessions");
                }
                return _RememberedSessions;
            }
        }
        private ObjectSet<RememberedSessions> _RememberedSessions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ToWatch> ToWatches
        {
            get
            {
                if ((_ToWatches == null))
                {
                    _ToWatches = base.CreateObjectSet<ToWatch>("ToWatches");
                }
                return _ToWatches;
            }
        }
        private ObjectSet<ToWatch> _ToWatches;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Movies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMovies(Movie movie)
        {
            base.AddObject("Movies", movie);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MovieAtStorages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMovieAtStorages(MovieAtStorage movieAtStorage)
        {
            base.AddObject("MovieAtStorages", movieAtStorage);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the StorageLocations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStorageLocations(StorageLocation storageLocation)
        {
            base.AddObject("StorageLocations", storageLocation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SeenStatuses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSeenStatuses(SeenStatus seenStatus)
        {
            base.AddObject("SeenStatuses", seenStatus);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Genres EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGenres(Genre genre)
        {
            base.AddObject("Genres", genre);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the People EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPeople(Person person)
        {
            base.AddObject("People", person);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RememberedSessions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRememberedSessions(RememberedSessions rememberedSessions)
        {
            base.AddObject("RememberedSessions", rememberedSessions);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ToWatches EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToToWatches(ToWatch toWatch)
        {
            base.AddObject("ToWatches", toWatch);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Epidaurus.Domain.Entities", Name="Genre")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Genre : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Genre object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Genre CreateGenre(global::System.Int32 id, global::System.String name)
        {
            Genre genre = new Genre();
            genre.Id = id;
            genre.Name = name;
            return genre;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "GenreMovie", "Movie")]
        public EntityCollection<Movie> Movies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Movie>("Epidaurus.Domain.Entities.GenreMovie", "Movie");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Movie>("Epidaurus.Domain.Entities.GenreMovie", "Movie", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Epidaurus.Domain.Entities", Name="Movie")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Movie : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Movie object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="title">Initial value of the Title property.</param>
        /// <param name="score">Initial value of the Score property.</param>
        /// <param name="year">Initial value of the Year property.</param>
        /// <param name="imdbQueried">Initial value of the ImdbQueried property.</param>
        /// <param name="addedAt">Initial value of the AddedAt property.</param>
        /// <param name="imdbQueryFailCount">Initial value of the ImdbQueryFailCount property.</param>
        public static Movie CreateMovie(global::System.Int32 id, global::System.String title, global::System.Int32 score, global::System.Int16 year, global::System.Boolean imdbQueried, global::System.DateTime addedAt, global::System.Int32 imdbQueryFailCount)
        {
            Movie movie = new Movie();
            movie.Id = id;
            movie.Title = title;
            movie.Score = score;
            movie.Year = year;
            movie.ImdbQueried = imdbQueried;
            movie.AddedAt = addedAt;
            movie.ImdbQueryFailCount = imdbQueryFailCount;
            return movie;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Score
        {
            get
            {
                return _Score;
            }
            set
            {
                OnScoreChanging(value);
                ReportPropertyChanging("Score");
                _Score = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Score");
                OnScoreChanged();
            }
        }
        private global::System.Int32 _Score;
        partial void OnScoreChanging(global::System.Int32 value);
        partial void OnScoreChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImdbId
        {
            get
            {
                return _ImdbId;
            }
            set
            {
                OnImdbIdChanging(value);
                ReportPropertyChanging("ImdbId");
                _ImdbId = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImdbId");
                OnImdbIdChanged();
            }
        }
        private global::System.String _ImdbId;
        partial void OnImdbIdChanging(global::System.String value);
        partial void OnImdbIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Plot
        {
            get
            {
                return _Plot;
            }
            set
            {
                OnPlotChanging(value);
                ReportPropertyChanging("Plot");
                _Plot = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Plot");
                OnPlotChanged();
            }
        }
        private global::System.String _Plot;
        partial void OnPlotChanging(global::System.String value);
        partial void OnPlotChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Year
        {
            get
            {
                return _Year;
            }
            set
            {
                OnYearChanging(value);
                ReportPropertyChanging("Year");
                _Year = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Year");
                OnYearChanged();
            }
        }
        private global::System.Int16 _Year;
        partial void OnYearChanging(global::System.Int16 value);
        partial void OnYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean ImdbQueried
        {
            get
            {
                return _ImdbQueried;
            }
            set
            {
                OnImdbQueriedChanging(value);
                ReportPropertyChanging("ImdbQueried");
                _ImdbQueried = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ImdbQueried");
                OnImdbQueriedChanged();
            }
        }
        private global::System.Boolean _ImdbQueried;
        partial void OnImdbQueriedChanging(global::System.Boolean value);
        partial void OnImdbQueriedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int16> SeriesSeason
        {
            get
            {
                return _SeriesSeason;
            }
            set
            {
                OnSeriesSeasonChanging(value);
                ReportPropertyChanging("SeriesSeason");
                _SeriesSeason = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SeriesSeason");
                OnSeriesSeasonChanged();
            }
        }
        private Nullable<global::System.Int16> _SeriesSeason;
        partial void OnSeriesSeasonChanging(Nullable<global::System.Int16> value);
        partial void OnSeriesSeasonChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int16> SeriesEpisode
        {
            get
            {
                return _SeriesEpisode;
            }
            set
            {
                OnSeriesEpisodeChanging(value);
                ReportPropertyChanging("SeriesEpisode");
                _SeriesEpisode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SeriesEpisode");
                OnSeriesEpisodeChanged();
            }
        }
        private Nullable<global::System.Int16> _SeriesEpisode;
        partial void OnSeriesEpisodeChanging(Nullable<global::System.Int16> value);
        partial void OnSeriesEpisodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImageUrl
        {
            get
            {
                return _ImageUrl;
            }
            set
            {
                OnImageUrlChanging(value);
                ReportPropertyChanging("ImageUrl");
                _ImageUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImageUrl");
                OnImageUrlChanged();
            }
        }
        private global::System.String _ImageUrl;
        partial void OnImageUrlChanging(global::System.String value);
        partial void OnImageUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Runtime
        {
            get
            {
                return _Runtime;
            }
            set
            {
                OnRuntimeChanging(value);
                ReportPropertyChanging("Runtime");
                _Runtime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Runtime");
                OnRuntimeChanged();
            }
        }
        private Nullable<global::System.Int32> _Runtime;
        partial void OnRuntimeChanging(Nullable<global::System.Int32> value);
        partial void OnRuntimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime AddedAt
        {
            get
            {
                return _AddedAt;
            }
            set
            {
                OnAddedAtChanging(value);
                ReportPropertyChanging("AddedAt");
                _AddedAt = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AddedAt");
                OnAddedAtChanged();
            }
        }
        private global::System.DateTime _AddedAt;
        partial void OnAddedAtChanging(global::System.DateTime value);
        partial void OnAddedAtChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ImdbQueryFailCount
        {
            get
            {
                return _ImdbQueryFailCount;
            }
            set
            {
                OnImdbQueryFailCountChanging(value);
                ReportPropertyChanging("ImdbQueryFailCount");
                _ImdbQueryFailCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ImdbQueryFailCount");
                OnImdbQueryFailCountChanged();
            }
        }
        private global::System.Int32 _ImdbQueryFailCount;
        partial void OnImdbQueryFailCountChanging(global::System.Int32 value);
        partial void OnImdbQueryFailCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TmdbId
        {
            get
            {
                return _TmdbId;
            }
            set
            {
                OnTmdbIdChanging(value);
                ReportPropertyChanging("TmdbId");
                _TmdbId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TmdbId");
                OnTmdbIdChanged();
            }
        }
        private Nullable<global::System.Int32> _TmdbId;
        partial void OnTmdbIdChanging(Nullable<global::System.Int32> value);
        partial void OnTmdbIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Homepage
        {
            get
            {
                return _Homepage;
            }
            set
            {
                OnHomepageChanging(value);
                ReportPropertyChanging("Homepage");
                _Homepage = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Homepage");
                OnHomepageChanged();
            }
        }
        private global::System.String _Homepage;
        partial void OnHomepageChanging(global::System.String value);
        partial void OnHomepageChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "MovieSeenStatus", "SeenStatus")]
        public EntityCollection<SeenStatus> SeenStatues
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SeenStatus>("Epidaurus.Domain.Entities.MovieSeenStatus", "SeenStatus");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SeenStatus>("Epidaurus.Domain.Entities.MovieSeenStatus", "SeenStatus", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "MovieMovieAtStorage", "MovieAtStorage")]
        public EntityCollection<MovieAtStorage> MovieAtStorages
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MovieAtStorage>("Epidaurus.Domain.Entities.MovieMovieAtStorage", "MovieAtStorage");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MovieAtStorage>("Epidaurus.Domain.Entities.MovieMovieAtStorage", "MovieAtStorage", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "GenreMovie", "Genre")]
        public EntityCollection<Genre> Genres
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Genre>("Epidaurus.Domain.Entities.GenreMovie", "Genre");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Genre>("Epidaurus.Domain.Entities.GenreMovie", "Genre", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "MovieWriter", "Person")]
        public EntityCollection<Person> Writers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Person>("Epidaurus.Domain.Entities.MovieWriter", "Person");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Person>("Epidaurus.Domain.Entities.MovieWriter", "Person", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "MovieActor", "Person")]
        public EntityCollection<Person> Actors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Person>("Epidaurus.Domain.Entities.MovieActor", "Person");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Person>("Epidaurus.Domain.Entities.MovieActor", "Person", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "MovieDirector", "Person")]
        public EntityCollection<Person> Directors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Person>("Epidaurus.Domain.Entities.MovieDirector", "Person");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Person>("Epidaurus.Domain.Entities.MovieDirector", "Person", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "ToWatchMovie", "ToWatch")]
        public EntityCollection<ToWatch> ToWatches
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ToWatch>("Epidaurus.Domain.Entities.ToWatchMovie", "ToWatch");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ToWatch>("Epidaurus.Domain.Entities.ToWatchMovie", "ToWatch", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Epidaurus.Domain.Entities", Name="MovieAtStorage")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MovieAtStorage : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MovieAtStorage object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="relativePath">Initial value of the RelativePath property.</param>
        /// <param name="cleanedName">Initial value of the CleanedName property.</param>
        /// <param name="ignore">Initial value of the Ignore property.</param>
        public static MovieAtStorage CreateMovieAtStorage(global::System.Int32 id, global::System.String relativePath, global::System.String cleanedName, global::System.Boolean ignore)
        {
            MovieAtStorage movieAtStorage = new MovieAtStorage();
            movieAtStorage.Id = id;
            movieAtStorage.RelativePath = relativePath;
            movieAtStorage.CleanedName = cleanedName;
            movieAtStorage.Ignore = ignore;
            return movieAtStorage;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RelativePath
        {
            get
            {
                return _RelativePath;
            }
            set
            {
                OnRelativePathChanging(value);
                ReportPropertyChanging("RelativePath");
                _RelativePath = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RelativePath");
                OnRelativePathChanged();
            }
        }
        private global::System.String _RelativePath;
        partial void OnRelativePathChanging(global::System.String value);
        partial void OnRelativePathChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SampleRelativePath
        {
            get
            {
                return _SampleRelativePath;
            }
            set
            {
                OnSampleRelativePathChanging(value);
                ReportPropertyChanging("SampleRelativePath");
                _SampleRelativePath = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SampleRelativePath");
                OnSampleRelativePathChanged();
            }
        }
        private global::System.String _SampleRelativePath;
        partial void OnSampleRelativePathChanging(global::System.String value);
        partial void OnSampleRelativePathChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CleanedName
        {
            get
            {
                return _CleanedName;
            }
            set
            {
                OnCleanedNameChanging(value);
                ReportPropertyChanging("CleanedName");
                _CleanedName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CleanedName");
                OnCleanedNameChanged();
            }
        }
        private global::System.String _CleanedName;
        partial void OnCleanedNameChanging(global::System.String value);
        partial void OnCleanedNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Ignore
        {
            get
            {
                return _Ignore;
            }
            set
            {
                OnIgnoreChanging(value);
                ReportPropertyChanging("Ignore");
                _Ignore = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Ignore");
                OnIgnoreChanged();
            }
        }
        private global::System.Boolean _Ignore;
        partial void OnIgnoreChanging(global::System.Boolean value);
        partial void OnIgnoreChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "StorageLocationMovieSource", "StorageLocation")]
        public StorageLocation StorageLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StorageLocation>("Epidaurus.Domain.Entities.StorageLocationMovieSource", "StorageLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StorageLocation>("Epidaurus.Domain.Entities.StorageLocationMovieSource", "StorageLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StorageLocation> StorageLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StorageLocation>("Epidaurus.Domain.Entities.StorageLocationMovieSource", "StorageLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StorageLocation>("Epidaurus.Domain.Entities.StorageLocationMovieSource", "StorageLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "MovieMovieAtStorage", "Movie")]
        public Movie Movie
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Movie>("Epidaurus.Domain.Entities.MovieMovieAtStorage", "Movie").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Movie>("Epidaurus.Domain.Entities.MovieMovieAtStorage", "Movie").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Movie> MovieReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Movie>("Epidaurus.Domain.Entities.MovieMovieAtStorage", "Movie");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Movie>("Epidaurus.Domain.Entities.MovieMovieAtStorage", "Movie", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Epidaurus.Domain.Entities", Name="Person")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Person : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Person object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Person CreatePerson(global::System.Int32 id, global::System.String name)
        {
            Person person = new Person();
            person.Id = id;
            person.Name = name;
            return person;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImdbId
        {
            get
            {
                return _ImdbId;
            }
            set
            {
                OnImdbIdChanging(value);
                ReportPropertyChanging("ImdbId");
                _ImdbId = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImdbId");
                OnImdbIdChanged();
            }
        }
        private global::System.String _ImdbId;
        partial void OnImdbIdChanging(global::System.String value);
        partial void OnImdbIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TmdbId
        {
            get
            {
                return _TmdbId;
            }
            set
            {
                OnTmdbIdChanging(value);
                ReportPropertyChanging("TmdbId");
                _TmdbId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TmdbId");
                OnTmdbIdChanged();
            }
        }
        private Nullable<global::System.Int32> _TmdbId;
        partial void OnTmdbIdChanging(Nullable<global::System.Int32> value);
        partial void OnTmdbIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "MovieWriter", "Movie")]
        public EntityCollection<Movie> MoviesWhereWriter
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Movie>("Epidaurus.Domain.Entities.MovieWriter", "Movie");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Movie>("Epidaurus.Domain.Entities.MovieWriter", "Movie", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "MovieActor", "Movie")]
        public EntityCollection<Movie> MoviesWhereActor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Movie>("Epidaurus.Domain.Entities.MovieActor", "Movie");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Movie>("Epidaurus.Domain.Entities.MovieActor", "Movie", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "MovieDirector", "Movie")]
        public EntityCollection<Movie> MoviesWhereDirector
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Movie>("Epidaurus.Domain.Entities.MovieDirector", "Movie");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Movie>("Epidaurus.Domain.Entities.MovieDirector", "Movie", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Epidaurus.Domain.Entities", Name="RememberedSessions")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RememberedSessions : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RememberedSessions object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="userUsername">Initial value of the UserUsername property.</param>
        /// <param name="guidHash">Initial value of the GuidHash property.</param>
        /// <param name="createdAt">Initial value of the CreatedAt property.</param>
        public static RememberedSessions CreateRememberedSessions(global::System.Int32 id, global::System.String userUsername, global::System.String guidHash, global::System.DateTime createdAt)
        {
            RememberedSessions rememberedSessions = new RememberedSessions();
            rememberedSessions.Id = id;
            rememberedSessions.UserUsername = userUsername;
            rememberedSessions.GuidHash = guidHash;
            rememberedSessions.CreatedAt = createdAt;
            return rememberedSessions;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserUsername
        {
            get
            {
                return _UserUsername;
            }
            set
            {
                OnUserUsernameChanging(value);
                ReportPropertyChanging("UserUsername");
                _UserUsername = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UserUsername");
                OnUserUsernameChanged();
            }
        }
        private global::System.String _UserUsername;
        partial void OnUserUsernameChanging(global::System.String value);
        partial void OnUserUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GuidHash
        {
            get
            {
                return _GuidHash;
            }
            set
            {
                OnGuidHashChanging(value);
                ReportPropertyChanging("GuidHash");
                _GuidHash = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("GuidHash");
                OnGuidHashChanged();
            }
        }
        private global::System.String _GuidHash;
        partial void OnGuidHashChanging(global::System.String value);
        partial void OnGuidHashChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedAt
        {
            get
            {
                return _CreatedAt;
            }
            set
            {
                OnCreatedAtChanging(value);
                ReportPropertyChanging("CreatedAt");
                _CreatedAt = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedAt");
                OnCreatedAtChanged();
            }
        }
        private global::System.DateTime _CreatedAt;
        partial void OnCreatedAtChanging(global::System.DateTime value);
        partial void OnCreatedAtChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "UserRememberedSessions", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Epidaurus.Domain.Entities.UserRememberedSessions", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Epidaurus.Domain.Entities.UserRememberedSessions", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Epidaurus.Domain.Entities.UserRememberedSessions", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Epidaurus.Domain.Entities.UserRememberedSessions", "User", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Epidaurus.Domain.Entities", Name="SeenStatus")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SeenStatus : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SeenStatus object.
        /// </summary>
        /// <param name="seenAt">Initial value of the SeenAt property.</param>
        /// <param name="review">Initial value of the Review property.</param>
        /// <param name="score">Initial value of the Score property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static SeenStatus CreateSeenStatus(global::System.DateTime seenAt, global::System.String review, global::System.Int32 score, global::System.Int32 id)
        {
            SeenStatus seenStatus = new SeenStatus();
            seenStatus.SeenAt = seenAt;
            seenStatus.Review = review;
            seenStatus.Score = score;
            seenStatus.Id = id;
            return seenStatus;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime SeenAt
        {
            get
            {
                return _SeenAt;
            }
            set
            {
                OnSeenAtChanging(value);
                ReportPropertyChanging("SeenAt");
                _SeenAt = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SeenAt");
                OnSeenAtChanged();
            }
        }
        private global::System.DateTime _SeenAt;
        partial void OnSeenAtChanging(global::System.DateTime value);
        partial void OnSeenAtChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Review
        {
            get
            {
                return _Review;
            }
            set
            {
                OnReviewChanging(value);
                ReportPropertyChanging("Review");
                _Review = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Review");
                OnReviewChanged();
            }
        }
        private global::System.String _Review;
        partial void OnReviewChanging(global::System.String value);
        partial void OnReviewChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Score
        {
            get
            {
                return _Score;
            }
            set
            {
                OnScoreChanging(value);
                ReportPropertyChanging("Score");
                _Score = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Score");
                OnScoreChanged();
            }
        }
        private global::System.Int32 _Score;
        partial void OnScoreChanging(global::System.Int32 value);
        partial void OnScoreChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "MovieSeenStatus", "Movie")]
        public Movie Movie
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Movie>("Epidaurus.Domain.Entities.MovieSeenStatus", "Movie").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Movie>("Epidaurus.Domain.Entities.MovieSeenStatus", "Movie").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Movie> MovieReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Movie>("Epidaurus.Domain.Entities.MovieSeenStatus", "Movie");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Movie>("Epidaurus.Domain.Entities.MovieSeenStatus", "Movie", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "UserSeenStatus", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Epidaurus.Domain.Entities.UserSeenStatus", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Epidaurus.Domain.Entities.UserSeenStatus", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Epidaurus.Domain.Entities.UserSeenStatus", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Epidaurus.Domain.Entities.UserSeenStatus", "User", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Epidaurus.Domain.Entities", Name="StorageLocation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StorageLocation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new StorageLocation object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="type">Initial value of the Type property.</param>
        /// <param name="data1">Initial value of the Data1 property.</param>
        /// <param name="data2">Initial value of the Data2 property.</param>
        /// <param name="rebase">Initial value of the Rebase property.</param>
        /// <param name="active">Initial value of the Active property.</param>
        public static StorageLocation CreateStorageLocation(global::System.Int32 id, global::System.String name, global::System.String type, global::System.String data1, global::System.String data2, global::System.String rebase, global::System.Boolean active)
        {
            StorageLocation storageLocation = new StorageLocation();
            storageLocation.Id = id;
            storageLocation.Name = name;
            storageLocation.Type = type;
            storageLocation.Data1 = data1;
            storageLocation.Data2 = data2;
            storageLocation.Rebase = rebase;
            storageLocation.Active = active;
            return storageLocation;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Type
        {
            get
            {
                return _Type;
            }
            set
            {
                OnTypeChanging(value);
                ReportPropertyChanging("Type");
                _Type = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Type");
                OnTypeChanged();
            }
        }
        private global::System.String _Type;
        partial void OnTypeChanging(global::System.String value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Data1
        {
            get
            {
                return _Data1;
            }
            set
            {
                OnData1Changing(value);
                ReportPropertyChanging("Data1");
                _Data1 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Data1");
                OnData1Changed();
            }
        }
        private global::System.String _Data1;
        partial void OnData1Changing(global::System.String value);
        partial void OnData1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Data2
        {
            get
            {
                return _Data2;
            }
            set
            {
                OnData2Changing(value);
                ReportPropertyChanging("Data2");
                _Data2 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Data2");
                OnData2Changed();
            }
        }
        private global::System.String _Data2;
        partial void OnData2Changing(global::System.String value);
        partial void OnData2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Rebase
        {
            get
            {
                return _Rebase;
            }
            set
            {
                OnRebaseChanging(value);
                ReportPropertyChanging("Rebase");
                _Rebase = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Rebase");
                OnRebaseChanged();
            }
        }
        private global::System.String _Rebase;
        partial void OnRebaseChanging(global::System.String value);
        partial void OnRebaseChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "StorageLocationMovieSource", "MovieSource")]
        public EntityCollection<MovieAtStorage> MovieSources
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MovieAtStorage>("Epidaurus.Domain.Entities.StorageLocationMovieSource", "MovieSource");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MovieAtStorage>("Epidaurus.Domain.Entities.StorageLocationMovieSource", "MovieSource", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Epidaurus.Domain.Entities", Name="ToWatch")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ToWatch : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ToWatch object.
        /// </summary>
        /// <param name="userUsername">Initial value of the UserUsername property.</param>
        /// <param name="movieId">Initial value of the MovieId property.</param>
        /// <param name="comment">Initial value of the Comment property.</param>
        public static ToWatch CreateToWatch(global::System.String userUsername, global::System.Int32 movieId, global::System.String comment)
        {
            ToWatch toWatch = new ToWatch();
            toWatch.UserUsername = userUsername;
            toWatch.MovieId = movieId;
            toWatch.Comment = comment;
            return toWatch;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserUsername
        {
            get
            {
                return _UserUsername;
            }
            set
            {
                if (_UserUsername != value)
                {
                    OnUserUsernameChanging(value);
                    ReportPropertyChanging("UserUsername");
                    _UserUsername = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("UserUsername");
                    OnUserUsernameChanged();
                }
            }
        }
        private global::System.String _UserUsername;
        partial void OnUserUsernameChanging(global::System.String value);
        partial void OnUserUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MovieId
        {
            get
            {
                return _MovieId;
            }
            set
            {
                if (_MovieId != value)
                {
                    OnMovieIdChanging(value);
                    ReportPropertyChanging("MovieId");
                    _MovieId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MovieId");
                    OnMovieIdChanged();
                }
            }
        }
        private global::System.Int32 _MovieId;
        partial void OnMovieIdChanging(global::System.Int32 value);
        partial void OnMovieIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Comment
        {
            get
            {
                return _Comment;
            }
            set
            {
                OnCommentChanging(value);
                ReportPropertyChanging("Comment");
                _Comment = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Comment");
                OnCommentChanged();
            }
        }
        private global::System.String _Comment;
        partial void OnCommentChanging(global::System.String value);
        partial void OnCommentChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "UserToWatch", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Epidaurus.Domain.Entities.UserToWatch", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Epidaurus.Domain.Entities.UserToWatch", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Epidaurus.Domain.Entities.UserToWatch", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Epidaurus.Domain.Entities.UserToWatch", "User", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "ToWatchMovie", "Movie")]
        public Movie Movie
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Movie>("Epidaurus.Domain.Entities.ToWatchMovie", "Movie").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Movie>("Epidaurus.Domain.Entities.ToWatchMovie", "Movie").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Movie> MovieReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Movie>("Epidaurus.Domain.Entities.ToWatchMovie", "Movie");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Movie>("Epidaurus.Domain.Entities.ToWatchMovie", "Movie", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Epidaurus.Domain.Entities", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="username">Initial value of the Username property.</param>
        /// <param name="password">Initial value of the Password property.</param>
        /// <param name="lastLogin">Initial value of the LastLogin property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="isAdmin">Initial value of the IsAdmin property.</param>
        public static User CreateUser(global::System.String username, global::System.String password, global::System.DateTime lastLogin, global::System.String name, global::System.Boolean isAdmin)
        {
            User user = new User();
            user.Username = username;
            user.Password = password;
            user.LastLogin = lastLogin;
            user.Name = name;
            user.IsAdmin = isAdmin;
            return user;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                if (_Username != value)
                {
                    OnUsernameChanging(value);
                    ReportPropertyChanging("Username");
                    _Username = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Username");
                    OnUsernameChanged();
                }
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastLogin
        {
            get
            {
                return _LastLogin;
            }
            set
            {
                OnLastLoginChanging(value);
                ReportPropertyChanging("LastLogin");
                _LastLogin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastLogin");
                OnLastLoginChanged();
            }
        }
        private global::System.DateTime _LastLogin;
        partial void OnLastLoginChanging(global::System.DateTime value);
        partial void OnLastLoginChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsAdmin
        {
            get
            {
                return _IsAdmin;
            }
            set
            {
                OnIsAdminChanging(value);
                ReportPropertyChanging("IsAdmin");
                _IsAdmin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsAdmin");
                OnIsAdminChanged();
            }
        }
        private global::System.Boolean _IsAdmin;
        partial void OnIsAdminChanging(global::System.Boolean value);
        partial void OnIsAdminChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "UserSeenStatus", "SeenStatus")]
        public EntityCollection<SeenStatus> SeenStatuses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SeenStatus>("Epidaurus.Domain.Entities.UserSeenStatus", "SeenStatus");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SeenStatus>("Epidaurus.Domain.Entities.UserSeenStatus", "SeenStatus", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "UserRememberedSessions", "RememberedSessions")]
        public EntityCollection<RememberedSessions> RememberedSessions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RememberedSessions>("Epidaurus.Domain.Entities.UserRememberedSessions", "RememberedSessions");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RememberedSessions>("Epidaurus.Domain.Entities.UserRememberedSessions", "RememberedSessions", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Epidaurus.Domain.Entities", "UserToWatch", "ToWatch")]
        public EntityCollection<ToWatch> ToWatches
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ToWatch>("Epidaurus.Domain.Entities.UserToWatch", "ToWatch");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ToWatch>("Epidaurus.Domain.Entities.UserToWatch", "ToWatch", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
